'use client'

import React, { useState, useRef, useEffect } from 'react'
import { Editor } from '@tiptap/react'
import { 
  X, 
  Download, 
  FileText, 
  CheckCircle, 
  AlertCircle, 
  Loader2, 
  Eye,
  Share2,
  Settings,
  FileDown,
  Save,
  SendHorizontal
} from 'lucide-react'
import { DocumentExportService, type ExportOptions, type ProposalExportData, type ExportResult } from '@/lib/services/export'
import { DocumentStorageService, type ExportedDocumentMetadata } from '@/lib/services/document-storage'
import { EmailDeliveryService, type EmailDeliveryConfig } from '@/lib/services/email-delivery'

interface ExportActionsModalProps {
  isOpen: boolean
  onClose: () => void
  editor: Editor | null
}

type ExportFormat = 'pdf' | 'docx'
type ExportAction = 'save-draft' | 'submit-review' | 'export-download' | 'export-email'

interface ExportProgress {
  action: ExportAction | null
  format?: ExportFormat
  status: 'idle' | 'preparing' | 'generating' | 'completed' | 'error'
  progress: number
  message: string
  result?: ExportResult
  storedDocument?: unknown
  showEmailForm?: boolean
}

export default function ExportActionsModal({ isOpen, onClose, editor }: ExportActionsModalProps) {
  const [selectedFormat, setSelectedFormat] = useState<ExportFormat>('pdf')
  const [exportProgress, setExportProgress] = useState<ExportProgress>({
    action: null,
    status: 'idle',
    progress: 0,
    message: ''
  })
  const [showPreview, setShowPreview] = useState(false)
  const [exportOptions, setExportOptions] = useState<ExportOptions>({
    format: 'pdf',
    includeMetadata: true,
    includeCompliance: true,
    customStyles: {
      fontSize: 12,
      fontFamily: 'Arial',
      margins: {
        top: 20,
        right: 20,
        bottom: 20,
        left: 20
      },
      headerFooter: {
        includeHeader: true,
        includeFooter: true,
        headerText: 'Business Proposal',
        footerText: 'Generated by CareDraft'
      }
    }
  })

  const previewRef = useRef<HTMLDivElement>(null)

  // Reset state when modal opens/closes
  useEffect(() => {
    if (!isOpen) {
      setExportProgress({
        action: null,
        status: 'idle',
        progress: 0,
        message: ''
      })
      setShowPreview(false)
    }
  }, [isOpen])

  // Get proposal data from editor content
  const getProposalData = (): ProposalExportData => {
    const content = editor?.getHTML() || ''
    const text = editor?.getText() || ''
    
    return {
      id: `draft-${Date.now()}`,
      title: extractTitle(text) || 'Draft Proposal',
      content,
      metadata: {
        organization: 'CareDraft Organization',
        author: 'Current User',
        createdAt: new Date().toISOString(),
        lastModified: new Date().toISOString(),
        version: '1.0'
      },
      compliance: {
        checklist: [
          {
            item: 'Content review completed',
            status: 'complete',
            notes: 'Content has been reviewed and formatted'
          },
          {
            item: 'Export approval obtained',
            status: 'complete',
            notes: 'Ready for export'
          }
        ],
        requirements: [
          'Document must include all required sections',
          'Content must be professionally formatted'
        ]
      },
      sections: parseSections(content)
    }
  }

  // Extract title from content
  const extractTitle = (text: string): string | null => {
    const lines = text.split('\n').filter(line => line.trim())
    return lines.length > 0 ? lines[0].trim() : null
  }

  // Parse content into sections
  const parseSections = (content: string): Array<{ id: string; title: string; content: string; order: number }> => {
    const sections: Array<{ id: string; title: string; content: string; order: number }> = []
    const parser = new DOMParser()
    const doc = parser.parseFromString(content, 'text/html')
    const headings = doc.querySelectorAll('h1, h2, h3')
    
    headings.forEach((heading, index) => {
      sections.push({
        id: `section-${index + 1}`,
        title: heading.textContent || `Section ${index + 1}`,
        content: heading.outerHTML,
        order: index + 1
      })
    })

    return sections
  }

  // Handle export action
  const handleExport = async (action: ExportAction, format?: ExportFormat) => {
    if (!editor) return

    const currentFormat = format || selectedFormat
    setExportProgress({
      action,
      format: currentFormat,
      status: 'preparing',
      progress: 10,
      message: 'Preparing document...'
    })

    try {
      // Simulate preparation delay
      await new Promise(resolve => setTimeout(resolve, 500))

      setExportProgress(prev => ({
        ...prev,
        status: 'generating',
        progress: 30,
        message: `Generating ${currentFormat.toUpperCase()} document...`
      }))

      // Get proposal data
      const proposalData = getProposalData()

      // Update export options with selected format
      const options: ExportOptions = {
        ...exportOptions,
        format: currentFormat
      }

      // Get export service and generate document
      const exportService = DocumentExportService.getInstance()
      
      // Simulate progress updates
      const progressInterval = setInterval(() => {
        setExportProgress(prev => ({
          ...prev,
          progress: Math.min(prev.progress + 15, 80)
        }))
      }, 200)

      const result = await exportService.exportDocument(proposalData, options)

      clearInterval(progressInterval)

      if (result.success && result.data) {
        setExportProgress({
          action,
          format: currentFormat,
          status: 'completed',
          progress: 100,
          message: 'Export completed successfully!',
          result
        })

        // Handle different actions
        switch (action) {
          case 'save-draft':
            // Auto-close after success for save actions
            setTimeout(() => onClose(), 2000)
            break
          case 'export-download':
            // Auto-download the file
            handleDownload(result.data.blob, result.data.filename)
            break
          case 'export-email':
            // Store document and show email form
            await handleStoreAndEmail(result.data.blob, result.data.filename, currentFormat)
            break
        }

      } else {
        setExportProgress({
          action,
          format: currentFormat,
          status: 'error',
          progress: 0,
          message: result.error?.message || 'Export failed'
        })
      }

    } catch {
      setExportProgress({
        action,
        format: currentFormat,
        status: 'error',
        progress: 0,
        message: error instanceof Error ? error.message : 'An unexpected error occurred'
      })
    }
  }

  // Handle file download
  const handleDownload = (blob: Blob, filename: string) => {
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  // Handle storing document and preparing for email
  const handleStoreAndEmail = async (blob: Blob, filename: string, format: ExportFormat) => {
    try {
      setExportProgress(prev => ({
        ...prev,
        message: 'Storing document securely...',
        progress: 85
      }))

      // Note: This would require user authentication context in a real implementation
      const mockUserId = 'current-user-id'
      const mockOrgId = 'current-org-id'
      
      const proposalData = getProposalData()
      
      // Prepare document metadata
      const documentMetadata = {
        filename,
        originalTitle: proposalData.title,
        exportFormat: format,
        organizationId: mockOrgId,
        userId: mockUserId,
        proposalId: proposalData.id,
        fileSize: blob.size,
        metadata: {
          exportedAt: new Date().toISOString(),
          exportOptions: exportOptions,
          processingTime: 1000, // Default processing time
          userAgent: navigator.userAgent
        },
        isPublic: false
      }

      // Store document (this would use the actual service in real implementation)
      // const storageResult = await storageService.storeExportedDocument(blob, documentMetadata)
      
      // For now, simulate successful storage
      const simulatedStorageResult = {
        success: true,
        data: {
          ...documentMetadata,
          id: `doc-${Date.now()}`,
          filePath: `exports/${mockUserId}/${filename}`,
          downloadCount: 0,
          version: 1,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      }

      if (simulatedStorageResult.success) {
        setExportProgress(prev => ({
          ...prev,
          message: 'Document stored successfully! Prepare email...',
          progress: 100,
          storedDocument: simulatedStorageResult.data
        }))

        // Show email form after successful storage
        setTimeout(() => {
          setExportProgress(prev => ({
            ...prev,
            showEmailForm: true
          }))
        }, 1000)
      } else {
        throw new Error('Failed to store document')
      }

    } catch {
      setExportProgress(prev => ({
        ...prev,
        status: 'error',
        message: error instanceof Error ? error.message : 'Failed to store document',
        progress: 0
      }))
    }
  }

  // Handle preview toggle
  const handlePreview = () => {
    setShowPreview(!showPreview)
  }

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        {/* Background overlay */}
        <div 
          className="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75"
          onClick={onClose}
        />

        {/* Modal */}
        <div className="inline-block w-full max-w-2xl my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg">
          {/* Header */}
          <div className="flex items-center justify-between px-6 py-4 border-b border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="flex items-center justify-center w-10 h-10 bg-brand-primary-light rounded-lg">
                <FileDown className="h-5 w-5 text-brand-primary" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-gray-900">Export & Actions</h3>
                <p className="text-sm text-gray-500">Save, review, or export your document</p>
              </div>
            </div>
            
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 transition-colors"
              disabled={exportProgress.status === 'generating'}
            >
              <X className="h-6 w-6" />
            </button>
          </div>

          {/* Content */}
          <div className="p-6">
            {/* Export Progress */}
            {exportProgress.status !== 'idle' && (
              <div className="mb-6 p-4 bg-gray-50 rounded-lg">
                <div className="flex items-center space-x-3 mb-3">
                  {exportProgress.status === 'generating' && (
                    <Loader2 className="h-5 w-5 text-brand-primary animate-spin" />
                  )}
                  {exportProgress.status === 'completed' && (
                    <CheckCircle className="h-5 w-5 text-green-600" />
                  )}
                  {exportProgress.status === 'error' && (
                    <AlertCircle className="h-5 w-5 text-red-600" />
                  )}
                  <div className="flex-1">
                    <div className="text-sm font-medium text-gray-900">
                      {exportProgress.message}
                    </div>
                    {exportProgress.format && (
                      <div className="text-xs text-gray-500">
                        Format: {exportProgress.format.toUpperCase()}
                      </div>
                    )}
                  </div>
                </div>
                
                {/* Progress bar */}
                {exportProgress.status === 'generating' && (
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div 
                      className="bg-brand-primary h-2 rounded-full transition-all duration-300"
                      style={{ width: `${exportProgress.progress}%` }}
                    />
                  </div>
                )}

                {/* Download button for completed exports */}
                {exportProgress.status === 'completed' && 
                 exportProgress.result?.data && 
                 exportProgress.action === 'export-download' && (
                  <button
                    onClick={() => handleDownload(
                      exportProgress.result!.data!.blob,
                      exportProgress.result!.data!.filename
                    )}
                    className="mt-3 inline-flex items-center space-x-2 px-3 py-1 bg-brand-primary text-white text-sm rounded hover:bg-brand-primary-dark transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download Again</span>
                  </button>
                )}
              </div>
            )}

            {/* Action Buttons */}
            <div className="space-y-4">
              {/* Quick Actions Row */}
              <div className="grid grid-cols-2 gap-3">
                {/* Save Draft */}
                <button
                  onClick={() => handleExport('save-draft')}
                  disabled={exportProgress.status === 'generating'}
                  className="flex items-center justify-center space-x-2 px-4 py-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <Save className="h-4 w-4" />
                  <span>Save Draft</span>
                </button>

                {/* Submit for Review */}
                <button
                  onClick={() => handleExport('submit-review')}
                  disabled={exportProgress.status === 'generating'}
                  className="flex items-center justify-center space-x-2 px-4 py-3 text-sm font-medium text-white bg-brand-600 rounded-lg hover:bg-brand-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <SendHorizontal className="h-4 w-4" />
                  <span>Submit for Review</span>
                </button>
              </div>

              {/* Export Format Selection */}
              <div className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-center justify-between mb-3">
                  <h4 className="text-sm font-medium text-gray-900">Export Format</h4>
                  <button
                    onClick={handlePreview}
                    className="text-sm text-brand-primary hover:text-brand-primary-dark flex items-center space-x-1"
                  >
                    <Eye className="h-4 w-4" />
                    <span>Preview</span>
                  </button>
                </div>

                {/* Format Selection */}
                <div className="grid grid-cols-2 gap-2 mb-4">
                  <button
                    onClick={() => setSelectedFormat('pdf')}
                    className={`flex items-center justify-center space-x-2 px-3 py-2 text-sm font-medium rounded border transition-colors ${
                      selectedFormat === 'pdf'
                        ? 'bg-brand-primary-light border-brand-primary text-brand-primary-dark'
                        : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    <FileText className="h-4 w-4" />
                    <span>PDF</span>
                  </button>
                  
                  <button
                    onClick={() => setSelectedFormat('docx')}
                    className={`flex items-center justify-center space-x-2 px-3 py-2 text-sm font-medium rounded border transition-colors ${
                      selectedFormat === 'docx'
                        ? 'bg-brand-primary-light border-brand-primary text-brand-primary-dark'
                        : 'bg-white border-gray-200 text-gray-700 hover:bg-gray-50'
                    }`}
                  >
                    <FileText className="h-4 w-4" />
                    <span>DOCX</span>
                  </button>
                </div>

                {/* Export Actions */}
                <div className="grid grid-cols-2 gap-2">
                  <button
                    onClick={() => handleExport('export-download', selectedFormat)}
                    disabled={exportProgress.status === 'generating'}
                    className="flex items-center justify-center space-x-2 px-4 py-2 text-sm font-medium text-white bg-brand-primary rounded hover:bg-brand-primary-dark disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <Download className="h-4 w-4" />
                    <span>Download</span>
                  </button>
                  
                  <button
                    onClick={() => handleExport('export-email', selectedFormat)}
                    disabled={exportProgress.status === 'generating'}
                    className="flex items-center justify-center space-x-2 px-4 py-2 text-sm font-medium text-brand-primary-dark bg-brand-primary-light border border-brand-primary rounded hover:bg-brand-primary-light disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <Share2 className="h-4 w-4" />
                    <span>Email</span>
                  </button>
                </div>
              </div>
            </div>

            {/* Preview Section */}
            {showPreview && (
              <div className="mt-6 border border-gray-200 rounded-lg">
                <div className="px-4 py-3 bg-gray-50 border-b border-gray-200">
                  <h4 className="text-sm font-medium text-gray-900">Document Preview</h4>
                </div>
                <div 
                  ref={previewRef}
                  className="p-4 max-h-64 overflow-y-auto"
                >
                  <div className="prose prose-sm max-w-none">
                    {editor && (
                      <div dangerouslySetInnerHTML={{ __html: editor.getHTML() }} />
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Email Form */}
            {exportProgress.showEmailForm && exportProgress.storedDocument && (
              <div className="mt-6 border border-gray-200 rounded-lg">
                <div className="px-4 py-3 bg-brand-primary-light border-b border-gray-200">
                  <div className="flex items-center space-x-2">
                    <SendHorizontal className="h-5 w-5 text-brand-primary" />
                    <h4 className="text-sm font-medium text-gray-900">Send Document via Email</h4>
                  </div>
                </div>
                <div className="p-4 space-y-4">
                  {/* Document Info */}
                  <div className="bg-gray-50 p-3 rounded border">
                    <div className="text-sm font-medium text-gray-900">{exportProgress.storedDocument.originalTitle}</div>
                    <div className="text-xs text-gray-500 flex items-center space-x-4">
                      <span>Format: {exportProgress.storedDocument.exportFormat.toUpperCase()}</span>
                      <span>Size: {(exportProgress.storedDocument.fileSize / 1024).toFixed(1)} KB</span>
                    </div>
                  </div>

                  {/* Email Fields */}
                  <div className="grid grid-cols-1 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Recipient Email *
                      </label>
                      <input
                        type="email"
                        placeholder="recipient@example.com"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-brand-primary"
                        required
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Subject
                      </label>
                      <input
                        type="text"
                        defaultValue={`Document Shared: ${exportProgress.storedDocument.originalTitle}`}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-brand-primary"
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Personal Message (Optional)
                      </label>
                      <textarea
                        rows={3}
                        placeholder="Add a personal message to accompany the document..."
                        className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-brand-primary focus:border-brand-primary"
                      />
                    </div>
                  </div>

                  {/* Email Actions */}
                  <div className="flex items-center justify-between pt-2">
                    <button
                      onClick={() => setExportProgress(prev => ({ ...prev, showEmailForm: false }))}
                      className="text-sm text-gray-600 hover:text-gray-800 transition-colors"
                    >
                      Cancel
                    </button>
                    <div className="flex space-x-2">
                      <button
                        className="px-4 py-2 text-sm font-medium text-brand-primary-dark bg-brand-primary-light border border-brand-primary rounded hover:bg-brand-primary-light transition-colors"
                      >
                        Preview Email
                      </button>
                      <button
                        className="px-4 py-2 text-sm font-medium text-white bg-brand-primary rounded hover:bg-brand-primary-dark transition-colors"
                      >
                        Send Email
                      </button>
                    </div>
                  </div>

                  {/* Email Templates Info */}
                  <div className="text-xs text-gray-500 bg-brand-50 p-2 rounded">
                    💡 The email will include a professional template with download link and document preview.
                  </div>
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div className="px-6 py-3 bg-gray-50 border-t border-gray-200 flex items-center justify-between">
            <div className="text-xs text-gray-500">
              {editor && `${editor.getText().length} characters, ${editor.getText().trim().split(/\s+/).length} words`}
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={onClose}
                disabled={exportProgress.status === 'generating'}
                className="text-sm text-gray-600 hover:text-gray-800 transition-colors disabled:opacity-50"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 